library(shiny)


shinyServer(
  function(input, output, session) {
    
    selected_location <- reactive({
      req(input$location)
      street_all_sites_2 %>% 
        filter(Sites %in% input$location)
    })
    
    selected_pollutant <- reactive({
      req(input$pollutant)
      selected_location() %>% 
        filter(Pollutants %in% input$pollutant)
    })
    
      output$Pollutant_Concentration <- renderDataTable({
        selected_pollutant() %>%
          group_by(Sites, Pollutants) %>%
          summarise(
            average = round(mean(Concentration, na.rm = TRUE), 2),
            median = round(median(Concentration, na.rm = TRUE), 2),
            maximum = round(max(Concentration, na.rm = TRUE), 2),
            minimum = round(min(Concentration, na.rm = TRUE), 2)
          ) %>%
          ungroup()
      })
      
      street_summary_weekday <- reactive({
        req(input$pollutant)
        selected_location() %>%
          filter(Days %in% Weekday) %>%
          group_by(Sites, Pollutants, Hour) %>%
          summarise(Average_Concentration = mean(Concentration, na.rm = TRUE)) %>%
          filter(Pollutants == input$pollutant) %>%
          ungroup()
          })
      
      output$Pollutant_Conc_Weekday_Plot <- renderPlotly({
        plot_A <- street_summary_weekday() %>%
          ggplot(aes(Hour, Average_Concentration, colour = Pollutants, group = Pollutants)) +
          geom_line() +
          facet_wrap(~ Sites, nrow = 4) +
          labs(y = "Average Conentration of Pollutants", x = "Hour") +
          theme(axis.text.x = element_text(angle = 45, vjust = 0.1, hjust = 0.1, size = 5), 
                axis.text.y = element_text(size = 8), axis.title = element_text(size = 8), 
                plot.title = element_text(size = 8), legend.text = element_text(size = 8), 
                legend.title = element_text(size = 8), strip.text = element_text(size = 8), 
                panel.grid.major = element_line(size = 1.5)) +
          guides(color = guide_legend(override.aes = list(size = 5)))
        
        ggplotly(plot_A)
      })
      
      street_summary_weekend <- reactive({
        req(input$pollutant)
        selected_location() %>%
          filter(Days %in% Weekend) %>%
          group_by(Sites, Pollutants, Hour) %>%
          summarise(Average_Concentration = mean(Concentration, na.rm = TRUE)) %>%
          filter(Pollutants == input$pollutant) %>%
          ungroup()
      })
      
      output$Pollutant_Conc_Weekend_Plot <- renderPlotly({
       plot_B <- street_summary_weekend() %>%
          ggplot(aes(Hour, Average_Concentration, colour = Pollutants, group = Pollutants)) +
          geom_line() +
          facet_wrap(~ Sites, nrow = 4) +
          labs(y = "Average Conentration of Pollutants", x = "Hour") +
         theme(axis.text.x = element_text(angle = 45, vjust = 0.1, hjust = 0.1, size = 5), 
               axis.text.y = element_text(size = 8), axis.title = element_text(size = 8), 
               plot.title = element_text(size = 8), legend.text = element_text(size = 8), 
               legend.title = element_text(size = 8), strip.text = element_text(size = 8), 
               panel.grid.major = element_line(size = 1.5)) +
         guides(color = guide_legend(override.aes = list(size = 5))) 
       
       ggplotly(plot_B)
      })
      
      tmap_mode("view")
      
      output$map <- renderTmap({
        tm_shape(selected_pollutant()) +
          tm_fill("Concentration", 
                  style = "kmeans") +
          tm_borders(alpha = 0.5, lwd = 2) +
          tm_facets(by = "Pollutants", as.layers = TRUE)
      })
  }
  
    ) 
                                                    
